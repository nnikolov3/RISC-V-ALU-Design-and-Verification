# vsim -c tb_alu_stimulus -do "run -all; quit" -solvefaildebug=2 
# Start time: 13:56:35 on Feb 16,2025
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# //  Questa Sim-64
# //  Version 2021.3_1 linux_x86_64 Aug 15 2021
# //
# //  Copyright 1991-2021 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading work.tb_generator_verif_sv_unit(fast)
# Loading work.tb_alu_stimulus(fast)
# run -all
# 
# === Addition with zero operand ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 5 (Decimal: 5)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: 5 (Decimal: 5)
# --------------------
# 
# === Subtraction with negative result ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 3 (Decimal: 3)
# IMM: 8 (Decimal: 8)
# Clock Enable: 1
# Expected Result: b (Decimal: 11)
# --------------------
# 
# === Maximum value addition ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: f (Decimal: 15)
# IMM: f (Decimal: 15)
# Clock Enable: 1
# Expected Result: e (Decimal: 14)
# --------------------
# 
# === Subtraction with same operands ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 7 (Decimal: 7)
# IMM: 7 (Decimal: 7)
# Clock Enable: 1
# Expected Result: 0 (Decimal: 0)
# --------------------
# 
# === Edge case - all zeros ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 0 (Decimal: 0)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: 0 (Decimal: 0)
# --------------------
# 
# === Random Scenario 0 ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 4 (Decimal: 4)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: 4 (Decimal: 4)
# --------------------
# 
# === Random Scenario 1 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 1 (Decimal: 1)
# IMM: f (Decimal: 15)
# Clock Enable: 1
# Expected Result: 0 (Decimal: 0)
# --------------------
# 
# === Random Scenario 2 ===
# ALU Control: 00000000000010
# Opcode: 000
# RS1: 2 (Decimal: 2)
# IMM: c (Decimal: 12)
# Clock Enable: 0
# Expected Result: 6 (Decimal: 6)
# --------------------
# 
# === Random Scenario 3 ===
# ALU Control: 00000000000001
# Opcode: 001
# RS1: b (Decimal: 11)
# IMM: b (Decimal: 11)
# Clock Enable: 1
# Expected Result: 6 (Decimal: 6)
# --------------------
# 
# === Random Scenario 4 ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 0 (Decimal: 0)
# IMM: 9 (Decimal: 9)
# Clock Enable: 1
# Expected Result: 7 (Decimal: 7)
# --------------------
# 
# === Random Scenario 5 ===
# ALU Control: 00000000000001
# Opcode: 001
# RS1: f (Decimal: 15)
# IMM: 8 (Decimal: 8)
# Clock Enable: 0
# Expected Result: 7 (Decimal: 7)
# --------------------
# 
# === Random Scenario 6 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 3 (Decimal: 3)
# IMM: b (Decimal: 11)
# Clock Enable: 1
# Expected Result: e (Decimal: 14)
# --------------------
# 
# === Random Scenario 7 ===
# ALU Control: 00000000000010
# Opcode: 000
# RS1: 5 (Decimal: 5)
# IMM: a (Decimal: 10)
# Clock Enable: 1
# Expected Result: b (Decimal: 11)
# --------------------
# 
# === Random Scenario 8 ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 1 (Decimal: 1)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: 1 (Decimal: 1)
# --------------------
# 
# === Random Scenario 9 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: c (Decimal: 12)
# IMM: f (Decimal: 15)
# Clock Enable: 1
# Expected Result: b (Decimal: 11)
# --------------------
# 
# === Random Scenario 10 ===
# ALU Control: 00000000000010
# Opcode: 000
# RS1: 3 (Decimal: 3)
# IMM: 6 (Decimal: 6)
# Clock Enable: 1
# Expected Result: d (Decimal: 13)
# --------------------
# 
# === Random Scenario 11 ===
# ALU Control: 00000000000001
# Opcode: 001
# RS1: 9 (Decimal: 9)
# IMM: 9 (Decimal: 9)
# Clock Enable: 1
# Expected Result: 2 (Decimal: 2)
# --------------------
# 
# === Random Scenario 12 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 4 (Decimal: 4)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: 4 (Decimal: 4)
# --------------------
# 
# === Random Scenario 13 ===
# ALU Control: 00000000000001
# Opcode: 001
# RS1: f (Decimal: 15)
# IMM: 4 (Decimal: 4)
# Clock Enable: 0
# Expected Result: 3 (Decimal: 3)
# --------------------
# 
# === Random Scenario 14 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: 5 (Decimal: 5)
# IMM: e (Decimal: 14)
# Clock Enable: 1
# Expected Result: 3 (Decimal: 3)
# --------------------
# 
# === Random Scenario 15 ===
# ALU Control: 00000000000010
# Opcode: 000
# RS1: 7 (Decimal: 7)
# IMM: 3 (Decimal: 3)
# Clock Enable: 1
# Expected Result: 4 (Decimal: 4)
# --------------------
# 
# === Random Scenario 16 ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: f (Decimal: 15)
# IMM: 0 (Decimal: 0)
# Clock Enable: 1
# Expected Result: f (Decimal: 15)
# --------------------
# 
# === Random Scenario 17 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: f (Decimal: 15)
# IMM: b (Decimal: 11)
# Clock Enable: 1
# Expected Result: a (Decimal: 10)
# --------------------
# 
# === Random Scenario 18 ===
# ALU Control: 00000000000010
# Opcode: 001
# RS1: 4 (Decimal: 4)
# IMM: 6 (Decimal: 6)
# Clock Enable: 1
# Expected Result: e (Decimal: 14)
# --------------------
# 
# === Random Scenario 19 ===
# ALU Control: 00000000000001
# Opcode: 000
# RS1: f (Decimal: 15)
# IMM: f (Decimal: 15)
# Clock Enable: 1
# Expected Result: e (Decimal: 14)
# --------------------
# ** Note: $finish    : tb_generator_verif.sv(13)
#    Time: 10 ns  Iteration: 0  Instance: /tb_alu_stimulus
# End time: 13:56:37 on Feb 16,2025, Elapsed time: 0:00:02
# Errors: 0, Warnings: 0
