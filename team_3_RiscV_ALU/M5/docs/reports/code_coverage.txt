Coverage Report by DU with details

=================================================================================
=== Design Unit: work.rv32i_alu
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        43        43         0   100.00%

================================Branch Details================================

Branch Coverage for Design Unit work.rv32i_alu

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File rv32i_alu.sv
------------------------------------IF Branch------------------------------------
    150                                     5273     Count coming in to IF
    150             1                        546             if (!i_rst_n) begin
    154             1                       4727             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                     4727     Count coming in to IF
    156             1                       4725                 if (i_ce && !stall_bit) begin  //update logicister only if this stage is enabled
                                               2     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    176                                     4727     Count coming in to IF
    179             1                       4726                 end else if (!stall_bit) begin  //clock-enable will change only when not stalled
Branch totals: 1 hit of 1 branch = 100.00%

------------------------------------IF Branch------------------------------------
    196                                     5008     Count coming in to IF
    196             1                       2463             b   = (opcode_rtype || opcode_branch) ? i_rs2 : i_imm;  // b can either be rs2 or imm
    196             2                       2545             b   = (opcode_rtype || opcode_branch) ? i_rs2 : i_imm;  // b can either be rs2 or imm
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    197                                     5009     Count coming in to IF
    197             1                        380             if (alu_add) y_d = a + b;
                                            4629     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    198                                     5009     Count coming in to IF
    198             1                        340             if (alu_sub) y_d = a - b;
                                            4669     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    199                                     5009     Count coming in to IF
    199             1                        718             if (alu_slt || alu_sltu) begin
                                            4291     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    201                                      718     Count coming in to IF
    201             1                        353                 if (alu_slt) y_d = (a[31] ^ b[31]) ? {31'b0, a[31]} : y_d;
                                             365     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    201                                      353     Count coming in to IF
    201             2                        169                 if (alu_slt) y_d = (a[31] ^ b[31]) ? {31'b0, a[31]} : y_d;
    201             3                        184                 if (alu_slt) y_d = (a[31] ^ b[31]) ? {31'b0, a[31]} : y_d;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    203                                     5009     Count coming in to IF
    203             1                        385             if (alu_xor) y_d = a ^ b;
                                            4624     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    204                                     5009     Count coming in to IF
    204             1                        379             if (alu_or) y_d = a | b;
                                            4630     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    205                                     5009     Count coming in to IF
    205             1                        334             if (alu_and) y_d = a & b;
                                            4675     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    206                                     5009     Count coming in to IF
    206             1                        355             if (alu_sll) y_d = a << b[4:0];
                                            4654     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    207                                     5009     Count coming in to IF
    207             1                        340             if (alu_srl) y_d = a >> b[4:0];
                                            4669     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    208                                     5009     Count coming in to IF
    208             1                        350             if (alu_sra) y_d = $signed(a) >>> b[4:0];
                                            4659     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    209                                     5009     Count coming in to IF
    209             1                        690             if (alu_eq || alu_neq) begin
                                            4319     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    211                                      690     Count coming in to IF
    211             1                        365                 if (alu_neq) y_d = {31'b0, !y_d[0]};
                                             325     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    213                                     5009     Count coming in to IF
    213             1                        737             if (alu_ge || alu_geu) begin
                                            4272     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    215                                      737     Count coming in to IF
    215             1                        364                 if (alu_ge) y_d = (a[31] ^ b[31]) ? {31'b0, b[31]} : y_d;
                                             373     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    215                                      364     Count coming in to IF
    215             2                        179                 if (alu_ge) y_d = (a[31] ^ b[31]) ? {31'b0, b[31]} : y_d;
    215             3                        185                 if (alu_ge) y_d = (a[31] ^ b[31]) ? {31'b0, b[31]} : y_d;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    227                                    10015     Count coming in to IF
    227             1                      10013             if (!i_flush) begin
                                               2     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    228                                    10013     Count coming in to IF
    228             1                      10011                 if (opcode_rtype || opcode_itype) rd_d = y_d;
                                               2     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12        12         0   100.00%

================================Condition Details================================

Condition Coverage for Design Unit work.rv32i_alu --

  File rv32i_alu.sv
----------------Focused Condition View-------------------
Line       199 Item    1  (alu_slt || alu_sltu)
Condition totals: 2 of 2 input terms covered = 100.00%

-----------Focused Condition View (Bimodal)--------------
Line       201 Item    1  (a[31] ^ b[31])
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       209 Item    1  (alu_eq || alu_neq)
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       213 Item    1  (alu_ge || alu_geu)
Condition totals: 2 of 2 input terms covered = 100.00%

-----------Focused Condition View (Bimodal)--------------
Line       215 Item    1  (a[31] ^ b[31])
Condition totals: 2 of 2 input terms covered = 100.00%

----------------Focused Condition View-------------------
Line       228 Item    1  (opcode_rtype || opcode_itype)
Condition totals: 2 of 2 input terms covered = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      47        47         0   100.00%

================================Statement Details================================

Statement Coverage for Design Unit work.rv32i_alu --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File rv32i_alu.sv
    31                                               module rv32i_alu (
    32                                                   i_clk,
    33                                                   i_rst_n,
    34                                                   i_alu,
    35                                                   i_rs1_addr,
    36                                                   i_rs1,
    37                                                   i_rs2,
    38                                                   i_imm,
    39                                                   i_funct3,
    40                                                   i_opcode,
    41                                                   i_exception,
    42                                                   i_pc,
    43                                                   i_rd_addr,
    44                                                   i_ce,
    45                                                   i_stall,
    46                                                   i_force_stall,
    47                                                   i_flush,
    48                                                   o_rs1_addr,
    49                                                   o_rs1,
    50                                                   o_rs2,
    51                                                   o_imm,
    52                                                   o_funct3,
    53                                                   o_opcode,
    54                                                   o_exception,
    55                                                   o_y,
    56                                                   o_pc,
    57                                                   o_next_pc,
    58                                                   o_change_pc,
    59                                                   o_wr_rd,
    60                                                   o_rd_addr,
    61                                                   o_rd,
    62                                                   o_rd_valid,
    63                                                   o_stall_from_alu,
    64                                                   o_ce,
    65                                                   o_stall,
    66                                                   o_flush
    67                                               );
    68                                                   input logic i_clk, i_rst_n;
    69                                                   input logic [`ALU_WIDTH-1:0] i_alu;  //alu operation type from previous stage
    70                                                   input logic [4:0] i_rs1_addr;  //address for logicister source 1
    71                                                   input logic [31:0] i_rs1;  // Source logicister 1 value
    72                                                   input logic [31:0] i_rs2;  //Source logicister 2 value
    73                                                   input logic [31:0] i_imm;  //Immediate value from previous stage
    74                                                   input logic [2:0] i_funct3;  //function type from previous stage
    75                                                   input logic [`OPCODE_WIDTH-1:0] i_opcode;  //opcode type from previous stage
    76                                                   input logic [`EXCEPTION_WIDTH-1:0] i_exception;  //exception from decoder stage
    77                                                   input logic [31:0] i_pc;  //Program Counter
    78                                                   input logic [4:0] i_rd_addr;  //address for destination logicister (from previous stage)
    79                                                   input logic i_ce;  // input clk enable for pipeline stalling of this stage
    80                                                   // coverage off
    81                                                   input logic i_stall;  //informs this stage to stall
    82                                                   input logic i_force_stall;  //force this stage to stall
    83                                                   input logic i_flush;  //flush this stage
    84                                                   // coverage on
    85                                                   output logic [4:0] o_rs1_addr;  //address for logicister source 1
    86                                                   output logic [31:0] o_rs1;  //Source logicister 1 value
    87                                                   output logic [31:0] o_rs2;  //Source logicister 2 value
    88                                                   output logic [11:0] o_imm;  //Immediate value
    89                                                   output logic [2:0] o_funct3;  // function type
    90                                                   output logic [`OPCODE_WIDTH-1:0] o_opcode;  //opcode type
    91                                                   output logic [`EXCEPTION_WIDTH-1:0] o_exception;  //exception: illegal inst,ecall,ebreak,mret
    92                                                   output logic [31:0] o_y;  //result of arithmetic operation
    93                                                   output logic [31:0] o_pc;  //pc logicister in pipeline
    94                                                   output logic [31:0] o_next_pc;  //new pc value
    95                                                   output logic o_change_pc;  //high if PC needs to jump
    96                                                   output logic o_wr_rd;  //write rd to the base logic if enabled
    97                                                   output logic [4:0] o_rd_addr;  //address for destination logicister
    98                                                   output logic [31:0] o_rd;  //value to be written back to destination logicister
    99                                                   output logic o_rd_valid;  //high if o_rd is valid (not load nor csr instruction)
    100                                                  // coverage off
    101                                                  output logic o_stall_from_alu
    102                                                      ;  //prepare to stall next stage(memory-access stage) for load/store instruction
    103                                                  // coverage on
    104                                                  output logic o_ce;  // output clk enable for pipeline stalling of next stage
    105                                                  // coverage off
    106                                                  output logic o_stall;  //informs pipeline to stall
    107                                                  output logic o_flush;  //flush previous stages
    108                                                  // coverage on
    109                                                  // Internal signals
    110                                                  logic        alu_add;
    111                                                  logic        alu_sub;
    112                                                  logic        alu_slt;
    113                                                  logic        alu_sltu;
    114                                                  logic        alu_xor;
    115                                                  logic        alu_or;
    116                                                  logic        alu_and;
    117                                                  logic        alu_sll;
    118                                                  logic        alu_srl;
    119                                                  logic        alu_sra;
    120                                                  logic        alu_eq;
    121                                                  logic        alu_neq;
    122                                                  logic        alu_ge;
    123                                                  logic        alu_geu;
    124                                                  logic        opcode_rtype;
    125                                                  logic        opcode_itype;
    126                                                  // coverage off
    127                                                  logic        opcode_load;
    128                                                  logic        opcode_store;
    129                                                  logic        opcode_branch;
    130                                                  logic        opcode_jal;
    131                                                  logic        opcode_jalr;
    132                                                  logic        opcode_lui;
    133                                                  logic        opcode_auipc;
    134                                                  logic        opcode_system;
    135                                                  logic        opcode_fence;
    136                                                  // coverage on
    137                                                  logic [31:0] a;  //operand A
    138                                                  logic [31:0] b;  //operand B
    139                                                  logic [31:0] y_d;  //ALU output
    140                                                  logic [31:0] rd_d;  //next value to be written back to destination logicister
    141                                                  logic        wr_rd_d;  //write rd to baselogic if enabled
    142                                                  logic        rd_valid_d;  //high if rd is valid (not load nor csr instruction)
    143                                                  logic [31:0] a_pc;
    144                                                  logic [31:0] sum;
    145                                                  // coverage off
    146                                                  logic        stall_bit;
    147                                                  // coverage on
    148                                                  //logicister the output of i_alu
    149             1                       5273         always_ff @(posedge i_clk, negedge i_rst_n) begin
    150                                                      if (!i_rst_n) begin
    151             1                        546                 o_exception      <= 0;
    152             1                        546                 o_ce             <= 0;
    153             1                        546                 o_stall_from_alu <= 0;
    154                                                      end else begin
    155                                                          // coverage off -item c 1
    156                                                          if (i_ce && !stall_bit) begin  //update logicister only if this stage is enabled
    157             1                       4725                     o_opcode <= i_opcode;
    158             1                       4725                     o_exception <= i_exception;
    159             1                       4725                     o_y <= y_d;
    160             1                       4725                     o_rs1_addr <= i_rs1_addr;
    161             1                       4725                     o_rs1 <= i_rs1;
    162             1                       4725                     o_rs2 <= i_rs2;
    163             1                       4725                     o_rd_addr <= i_rd_addr;
    164             1                       4725                     o_imm <= i_imm[11:0];
    165             1                       4725                     o_funct3 <= i_funct3;
    166             1                       4725                     o_rd <= rd_d;
    167             1                       4725                     o_rd_valid <= rd_valid_d;
    168             1                       4725                     o_wr_rd <= wr_rd_d;
    169                                                              // coverage off
    170                                                              o_stall_from_alu <= i_opcode[`STORE] || i_opcode[`LOAD]
    171                                                                  ;  //stall next stage(memory-access stage) when need to store/load
    172                                                              // coverage on
    173             1                       4725                     o_pc <= i_pc;  //since accessing data memory always takes more than 1 cycle
    174                                                          end
    175                                                          // coverage off
    176                                                          if (i_flush && !stall_bit) begin  //flush this stage so clock-enable of next stage is disabled at next clock cycle
    177                                                              o_ce <= 0;
    178                                                              // coverage on
    179                                                          end else if (!stall_bit) begin  //clock-enable will change only when not stalled
    180             1                       4726                     o_ce <= i_ce;
    181                                                              // coverage off
    182                                                          end else if (stall_bit && !i_stall)
    183                                                              o_ce <= 0;  //if this stage is stalled but next stage is not, disable
    184                                                          // coverage on
    185                                                          //clock enable of next stage at next clock cycle (pipeline bubble)
    186                                                      end
    187                                                  end
    188                                                  // determine operation used then compute for y output
    189                                              
    190             1                       5009         always_comb begin
    191             1                       5009             y_d = 0;
    192                                                      // coverage off
    193                                                      a   = (opcode_jal || opcode_auipc) ? i_pc : i_rs1;  // a can either be pc or rs1
    194                                                      // coverage on
    195                                                      // coverage off -item c 1
    196             1                       5009             b   = (opcode_rtype || opcode_branch) ? i_rs2 : i_imm;  // b can either be rs2 or imm
    197             1                        380             if (alu_add) y_d = a + b;
    198             1                        340             if (alu_sub) y_d = a - b;
    199                                                      if (alu_slt || alu_sltu) begin
    200             1                        718                 y_d = {31'b0, (a < b)};
    201             1                        353                 if (alu_slt) y_d = (a[31] ^ b[31]) ? {31'b0, a[31]} : y_d;
    202                                                      end
    203             1                        385             if (alu_xor) y_d = a ^ b;
    204             1                        379             if (alu_or) y_d = a | b;
    205             1                        334             if (alu_and) y_d = a & b;
    206             1                        355             if (alu_sll) y_d = a << b[4:0];
    207             1                        340             if (alu_srl) y_d = a >> b[4:0];
    208             1                        350             if (alu_sra) y_d = $signed(a) >>> b[4:0];
    209                                                      if (alu_eq || alu_neq) begin
    210             1                        690                 y_d = {31'b0, (a == b)};
    211             1                        365                 if (alu_neq) y_d = {31'b0, !y_d[0]};
    212                                                      end
    213                                                      if (alu_ge || alu_geu) begin
    214             1                        737                 y_d = {31'b0, (a >= b)};
    215             1                        364                 if (alu_ge) y_d = (a[31] ^ b[31]) ? {31'b0, b[31]} : y_d;
    216                                                      end
    217                                                  end
    218                                                  //determine o_rd to be saved to baseg and next value of PC
    219             1                      10015         always_comb begin
    220             1                      10015             o_flush     = i_flush;  //flush this stage along with the previous stages
    221             1                      10015             rd_d        = 0;
    222             1                      10015             rd_valid_d  = 0;
    223             1                      10015             o_change_pc = 0;
    224             1                      10015             o_next_pc   = 0;
    225             1                      10015             wr_rd_d     = 0;
    226             1                      10015             a_pc        = i_pc;
    227                                                      if (!i_flush) begin
    228             1                      10011                 if (opcode_rtype || opcode_itype) rd_d = y_d;
    229                                                          // coverage off
    230                                                          if (opcode_branch && y_d[0]) begin
    231                                                              o_next_pc = sum;  //branch iff value of ALU is 1(true)
    232                                                              o_change_pc =
    233                                                                  i_ce;  //change PC when ce of this stage is high (o_change_pc is valid)
    234                                                              o_flush = i_ce;
    235                                                          end
    236                                                          if (opcode_jal || opcode_jalr) begin
    237                                                              if (opcode_jalr) a_pc = i_rs1;
    238                                                              o_next_pc = sum;  //jump to new PC
    239                                                              o_change_pc =
    240                                                                  i_ce;  //change PC when ce of this stage is high (o_change_pc is valid)
    241                                                              o_flush = i_ce;
    242                                                              rd_d = i_pc + 4;  //logicister the next pc value to destination logicister
    243                                                          end
    244                                                          // coverage on
    245                                                      end
    246                                                      // coverage off
    247                                                      if (opcode_lui) rd_d = i_imm;
    248                                                      if (opcode_auipc) rd_d = sum;
    249                                                      if (opcode_branch || opcode_store || (opcode_system && i_funct3 == 0) || opcode_fence)
    250                                                          wr_rd_d = 0;  //i_funct3==0 are the non-csr system instructions
    251                                                      else
    252                                                          wr_rd_d = 1;  //always write to the destination logic except when instruction is BRANCH or STORE or SYSTEM(except CSR system instruction)
    253                                                      if (opcode_load || (opcode_system && i_funct3 != 0))
    254                                                          rd_valid_d =
    255                                                              0;  //value of o_rd for load and CSR write is not yet available at this stage
    256                                                      else rd_valid_d = 1;
    257                                                      // coverage on
    258                                                      //stall logic (stall when upper stages are stalled, when forced to stall, or when needs to flush previous stages but are still stalled)
    259             1                      10015             o_stall = (i_stall || i_force_stall) && !i_flush;  //stall when alu needs wait time
    260                                                  end
    261                                              
    262                                                  assign
    263             1                      10004             sum = a_pc + i_imm;  //share adder for all addition operation for less resource utilization
    264             1                          3         assign stall_bit = o_stall || i_stall;



Total Coverage By Design Unit (filtered view): 100.00%

